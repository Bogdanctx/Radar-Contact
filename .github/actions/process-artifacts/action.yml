name: 'Process artifacts'
description: 'Process artifact files'

runs:
  using: "composite"
  steps:
    - name: Copy missing dlls
      shell: bash
      if: runner.os == 'Windows' && matrix.cxx == 'cl'
      run: |
        if [[ "${BUILD_TYPE}" =~ "Deb" ]]; then
          # runtime debug DLLs
          cp "$(which ucrtbased.dll)" \
             "$(which VCRUNTIME140_1D.dll)" \
             "$(which MSVCP140D.dll)" \
             "$(which VCRUNTIME140D.dll)" \
             ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}

          # sanitizers DLLs
          vcver=$(cat "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/Microsoft.VCToolsVersion.default.txt")
          vcbindir="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/${vcver}/bin/Hostx64/x64/"
          cp "${vcbindir}/clang_rt.asan_dynamic-x86_64.dll" \
             "${vcbindir}/clang_rt.asan_dbg_dynamic-x86_64.dll" \
             ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}
        fi

        # runtime release DLLs
        if [[ "${BUILD_TYPE}" =~ "Rel" ]]; then
          cp "$(which ucrtbase.dll)" \
             "$(which VCRUNTIME140_1.dll)" \
             "$(which MSVCP140.dll)" \
             "$(which VCRUNTIME140.dll)" \
             ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}
        fi

    - name: Copy stdlib (MinGW)
      shell: bash
      if: runner.os == 'Windows' && matrix.cxx == 'g++'
      # static linking might not work with MinGW, might be easier this way
      run: |
        cp gcc/mingw64/bin/libstdc++-6.dll \
          gcc/mingw64/bin/libgcc_s_seh-1.dll \
          gcc/mingw64/bin/libwinpthread-1.dll \
          ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}
