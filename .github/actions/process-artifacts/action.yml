name: 'Process artifacts'
description: 'Process artifact files'

runs:
  using: "composite"
  steps:
    - name: Patch macOS launcher
      shell: bash
      if: runner.os == 'macOS'
      run: |
        sed -i '' -e "s/oop/${EXECUTABLE_NAME}/" "${{ env.ZIP_NAME }}/launcher.command"
        chmod +x "${{ env.ZIP_NAME }}/launcher.command"

    - name: Copy missing dylibs
      shell: bash
      if: runner.os == 'macOS' && matrix.cxx == 'clang++'
      # FIXME: temp disable asan for macOS due to github issues
      run: |
        mkdir lib
        # if [[ "${BUILD_TYPE}" =~ "Deb" ]]; then
        #   # cp /Library/Developer/CommandLineTools/usr/lib/clang/16/lib/darwin/libclang_rt.asan_osx_dynamic.dylib lib
        #   # install_name_tool -change @rpath/libclang_rt.asan_osx_dynamic.dylib @executable_path/lib/libclang_rt.asan_osx_dynamic.dylib ${{ env.ZIP_NAME }}/${{ env.EXECUTABLE_NAME }}
        # fi
        ls -1 artifacts/lib | grep framework | xargs -I% ls artifacts/lib/%/Versions/A | grep -v "Resources" | xargs -I% cp artifacts/lib/%.framework/% lib
        ls -1 artifacts/lib | grep framework | xargs -I% ls artifacts/lib/%/Versions/A | grep -v "Resources" | xargs -I% install_name_tool -change @rpath/../Frameworks/%.framework/Versions/A/% @executable_path/lib/% ${{ env.ZIP_NAME }}/${{ env.EXECUTABLE_NAME }}
        mv lib ${{ env.ZIP_NAME }}/

    # - name: Copy missing dylibs (g++)
    #   shell: bash
    #   if: runner.os == 'macOS' && startsWith(matrix.cxx, 'g++')
    #   run: |
    #     mkdir lib
    #     cp /opt/homebrew/lib/gcc/13/libstdc++.6.dylib /opt/homebrew/lib/gcc/13/libgcc_s.1.1.dylib lib
    #     install_name_tool -change /opt/homebrew/lib/gcc/13/libstdc++.6.dylib @executable_path/lib/libstdc++.6.dylib ${{ env.ZIP_NAME }}/${{ env.EXECUTABLE_NAME }}
    #     install_name_tool -change /opt/homebrew/lib/gcc/13/libgcc_s.1.1.dylib @executable_path/lib/libgcc_s.1.1.dylib ${{ env.ZIP_NAME }}/${{ env.EXECUTABLE_NAME }}
    #     # not sure about these - SFML might not support GCC on macOS
    #     ls -1 artifacts/lib | grep framework | xargs -I% ls artifacts/lib/%/Versions/A | grep -v "Resources" | xargs -I% cp artifacts/lib/%.framework/% lib
    #     ls -1 artifacts/lib | grep framework | xargs -I% ls artifacts/lib/%/Versions/A | grep -v "Resources" | xargs -I% install_name_tool -change @rpath/../Frameworks/%.framework/Versions/A/% @executable_path/lib/% ${{ env.ZIP_NAME }}/${{ env.EXECUTABLE_NAME }}
    #     mv lib ${{ env.ZIP_NAME }}/

    - name: Copy missing dlls
      shell: bash
      if: runner.os == 'Windows' && matrix.cxx == 'cl'
      run: |
        if [[ "${BUILD_TYPE}" =~ "Deb" ]]; then
          # runtime debug DLLs
          cp "$(which ucrtbased.dll)" \
             "$(which VCRUNTIME140_1D.dll)" \
             "$(which MSVCP140D.dll)" \
             "$(which VCRUNTIME140D.dll)" \
             ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}

          # sanitizers DLLs
          vcver=$(cat "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/Microsoft.VCToolsVersion.default.txt")
          vcbindir="C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Tools/MSVC/${vcver}/bin/Hostx64/x64/"
          cp "${vcbindir}/clang_rt.asan_dynamic-x86_64.dll" \
             "${vcbindir}/clang_rt.asan_dbg_dynamic-x86_64.dll" \
             ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}
        fi

        # runtime release DLLs
        # if [[ "${BUILD_TYPE}" =~ "Rel" ]]; then
        cp "$(which ucrtbase.dll)" \
             "$(which VCRUNTIME140_1.dll)" \
             "$(which MSVCP140.dll)" \
             "$(which VCRUNTIME140.dll)" \
             ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}
        # fi

    - name: Copy stdlib (MinGW)
      shell: bash
      if: runner.os == 'Windows' && matrix.cxx == 'g++'
      # static linking might not work with MinGW, might be easier this way
      run: |
        cp gcc/mingw64/bin/libstdc++-6.dll \
          gcc/mingw64/bin/libgcc_s_seh-1.dll \
          gcc/mingw64/bin/libwinpthread-1.dll \
          ${GITHUB_WORKSPACE}/${{ env.ZIP_NAME }}
