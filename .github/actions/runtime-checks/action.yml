name: 'Runtime checks'
description: 'Run dynamic analysis tools'

runs:
  using: "composite"
  steps:
    # - name: Cache restore tools
    #   uses: actions/cache/restore@v4
    #   if: runner.os == 'Linux' && matrix.runs_msan == true
    #   id: cache-tools
    #   with:
    #     path: tools
    #     key: tools-clang-${{ matrix.clang_ver }}-stdlib-msan

    # - name: Setup memory sanitizer
    #   shell: bash
    #   if: runner.os == 'Linux' && matrix.runs_msan == true && steps.cache-tools.outputs.cache-hit != 'true'
    #   run: |
    #     mkdir -p tools
    #     cd tools
    #     git clone --depth=1 --branch=llvmorg-${{ matrix.clang_ver_full }} https://github.com/llvm/llvm-project
    #     cd llvm-project
    #     # mkdir build; cd build
    #     sudo ln -s -f /usr/bin/$CC /usr/bin/clang
    #     sudo ln -s -f /usr/bin/$CXX /usr/bin/clang++
    #     # https://github.com/llvm/llvm-project/issues/78354
    #     sudo sysctl vm.mmap_rnd_bits=28
    #     cmake -G Ninja -S runtimes -B build \
    #       -DCMAKE_BUILD_TYPE=Release \
    #       -DLLVM_ENABLE_RUNTIMES="libcxx;libcxxabi;libunwind" \
    #       -DCMAKE_C_COMPILER=clang \
    #       -DCMAKE_CXX_COMPILER=clang++ \
    #       -DLLVM_USE_SANITIZER=MemoryWithOrigins \
    #       -DCMAKE_BUILD_WITH_INSTALL_RPATH=true
    #     cmake --build build -j6 -- cxx cxxabi

    # - name: Cache save tools
    #   uses: actions/cache/save@v4
    #   if: runner.os == 'Linux' && matrix.runs_msan == true && steps.cache-tools.outputs.cache-hit != 'true'
    #   with:
    #     path: tools
    #     key: tools-clang-${{ matrix.clang_ver }}-stdlib-msan

    - name: Make scripts executable
      shell: bash
      if: runner.os == 'Linux'
      run: |
        chmod +x scripts/*

    - name: Sanitizers
      shell: bash
      if: runner.os == 'Linux' && matrix.runs_asan == true
      continue-on-error: true
      env:
        ASAN_OPTIONS: halt_on_error=0
        EXECUTABLE_NAME: ${{ env.EXECUTABLE_NAME }}
      run: |
          xvfb-run ./scripts/run_sanitizers.sh || true
      working-directory: ${{github.workspace}}

    - name: Valgrind
      shell: bash
      if: runner.os == 'Linux' && matrix.runs_valgrind == true
      continue-on-error: true
      env:
        EXECUTABLE_NAME: ${{ env.EXECUTABLE_NAME }}
      run: |
        xvfb-run ./scripts/run_valgrind.sh || true
      working-directory: ${{github.workspace}}
